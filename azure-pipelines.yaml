name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise, comment out the line below.
# pool: myAgentPool
pool:
  vmImage: ubuntu-18.04


variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'UdacityDS - 71'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: udacity

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#
    # Use Terraform to create the Infrastructure
    # Install Terraform on the pipeline agent
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'

    # Run Terraform Init on the pipeline agent
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'UdacityDS - 71'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2998947'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'tfstate'

    # ToDo: Run Terraform Validate
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
    # Install public key and private key file to the pipeline agent, using the task below.
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '172.173.176.46 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJaR2tjUdYJBTHfgfGRWvlZDMXT3YPFq+nxXudboSpRqxCx7lwEib7EfJA95WsJj6a6xfHRx6+IY171Pxgb/YKm5cWWAYEujTsdHegTdDrPTf4gk5+aU9QpfV3c8503taWLSIzbpywsv9bnjLSQRo7hJv1b1L8eQ+zDx1bIR/MUtQt+5yWi20DnuYnHeLLNPRZFv9RP6yGGzzv+tF4z+u7tH46V3jwhBM0iqiUmtI92204YtEO8hXzBR1ExVvDs93CgBASCtbTGZ2vo/96Ty8MIyko6oqSXT8dzS0zju5r0aRTuLY03YfIrC3JCCVhgeSiLJGketIvJJQvtorKtOhz'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC4nMGBfW2r8eCHxa5NwfSNMZIeA1L5KKM+ijfokr/7VnjBFG53tDayBB7gTeiEZV2HfJCv/TWM1vGm7/gIsuljCK3OMDDekmTJqoRKBnXYtHKBlYc1sKzZixGFi0KxrctdZCB1QzmB12OgAWWrfT4Wb8mvvHd/ebwuZ6E06e7Dx+gdYBeBck+peVmPfewzZvgOtByzCmS4T2CqkQuhiQPNO2guSWX0kmZk2xKjE1/EyQKTlPn6WGvrR/4eo5bnyk9MaO+QMMsw0IJ1xzwLlQy2AphSiUxq7zH7754s8VOFOtXMvgpC+l+UZp3AQXhs42EK9WiljBwijXHNao9L5fW7fzBUhHNSuxHoUpqf67i8f8oXBNVxG1sdHIIJI39Gv873sjIo4eavUUEMrLMtMflW9lRsl+TsW6Q41OV6C4zv5+Gh6Dx8+TrCeLnDZiEKF7F3bz8JJqdAW2Kd1Ut/VRcaoi6pPLYtEGXmoC5+04CMk1M/WKbUYmdQeav7ykMYOb0= ahoang@MacBook-Air-3.local'
        sshKeySecureFile: 'id_rsa'

    - task: DownloadSecureFile@1
      name: udacity_public_key
      inputs:
        secureFile: id_rsa


    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline.
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#
    # Postman - Install Newman
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script:           # ToDo: Write your commands to install newman
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite
    # ToDo: Verify the working directory and the newman scripts
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: newman run "Starter APIs.data_validation.json" -x -e "StarterAPITestEnv.postman_environment.json" --delay-request 1000 -r cli,junit --reporter-junit-export $(System.DefaultWorkingDirectory)/test_reports/data_validation.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: newman run "Starter APIs.regression.json" -x -e "StarterAPITestEnv.postman_environment.json" --delay-request 1000 -r cli,junit --reporter-junit-export $(System.DefaultWorkingDirectory)/test_reports/regression.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/test_reports/*.xml'
        mergeTestResults: true

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above.
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-FakeRestAPI.zip'
        replaceExistingArchive: true

    # FakeRestAPI - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-FakeRestAPI.zip
      displayName: FakeAPIPublish
      artifact: fake-rest-api

    #--------------------------------------------#
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suites
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-test-suite.zip'
        replaceExistingArchive: true
    # JMeter Test Suite - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-test-suite.zip
      displayName: Archive Jmeter Test Suites
      artifact: jmeter-test

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  #--------------------------------------------#
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: udacity
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'UdacityDS - 71'
              appType: 'webAppLinux'
              appName: 'anhhv3udacity-AppService'
              package: '$(Pipeline.Workspace)/fake-rest-api/$(Build.BuildId)-FakeRestAPI.zip'
          #--------------------------------------------#
          # Run JMeter test suite against the App Service
          # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.
          # ToDo: Generate the log file.
          - task: CmdLine@2
            inputs:
              script: |
                                                                            # ToDo: Write your commands
              workingDirectory: $(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above

  # #--------------------------------------------#
  # # Selenium | Functional UI Tests
  # # ToDo:
  # - deployment: VMDeploy
  #   displayName: Selenium Tests
  #   environment:
  #     name: udacity
  #     resourceType: VirtualMachine
  #     tags: selenium
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - download: current
  #           artifact: drop-ui-tests     # ToDo: Change/provide a name

  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image.
  #               #! /bin/bash

  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium

  #               #  ToDo: Add chromedriver executable to path
  #               export PATH=$PATH:/path/to/chromedriver

  #               # ToDo: Write commands for deploying the UI Test Suite (published zip artifact) to the linux VM and execute the Test Suite
  #               # ToDo: Direct the output of the Selenium Test Suite to a log file

